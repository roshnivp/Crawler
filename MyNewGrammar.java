/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
package com.sjsu.crawler.parsergrammar;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import java.text.SimpleDateFormat;
import org.apache.commons.lang.StringEscapeUtils;

public class MyNewGrammar implements MyNewGrammarConstants {
  static String content = null;
  static int i=0;
  public static void grammar(String purl)
  {
    URL url = null;
    InputStream is = null;
    BufferedReader br;
    String line;

        //download html code from URL

    try {
        //url = new URL("https://www.linkedin.com/pulse/daily-pulse-gm-silicon-valley-take-carl-icahns-next-big-john-c-abell");
        url =new URL(purl);
        is = url.openStream();
        br = new BufferedReader(new InputStreamReader(is));

       //PrintWriter inputFile = new PrintWriter("InputCode.txt","UTF-8");

                PrintWriter inputFile = new PrintWriter("/Users/milcegeorge/Documents/Crwaler/InputCode.txt", "UTF-8");

                //write html to file

        while ((line = br.readLine()) != null) {
                inputFile.write(line);
            //System.out.println(line);
        }

        inputFile.close();
    } catch (MalformedURLException mue) {
         mue.printStackTrace();
    } catch (IOException ioe) {
         ioe.printStackTrace();
    } finally {
        try {

            if (is != null) is.close();
        } catch (IOException ioe) {

        }
    }

        //extract content from the input file

    //File file = new File("InputCode.txt");

     File file = new File("/Users/milcegeorge/Documents/Crwaler/InputCode.txt");
    try
    {
      FileReader reader = new FileReader(file);
      char [] chars = new char [(int) file.length()];
      reader.read(chars);
      content = new String(chars);
      reader.close();
    }
    catch (IOException e)
    {
      e.printStackTrace();
    }

   //Initialize parser and the reader for the content
    //System.out.println(content);

    Reader sr = new StringReader(content);
    BufferedWriter writer = null;
    MyNewGrammar parser = new MyNewGrammar(sr);

    try
    {
      //parse and write to output file

      parser.startParser();
      String blank = " ";
      fileOutput fp = new fileOutput();
      String final_file_data = fp.finalTokens.toString();



    // String FileName1 = new SimpleDateFormat("yyyyMMddhhmmssssss'.txt'").format(new Date());

     // writer = new BufferedWriter(new FileWriter("/Users/milcegeorge/Documents/Crwaler/parserout/par"
     //+System.currentTimeMillis()+".txt"));

        String finalpath="C:/Users/milcegeorge/Documents/Crwaler/parserout/par"+(++i)+".txt";
        writer = new BufferedWriter(new FileWriter("/Users/milcegeorge/Documents/Crwaler/parserout/par"
     +i+".txt"));

       String javastr = StringEscapeUtils.unescapeHtml(final_file_data);
           String javastri= javastr.replaceAll("\u005c\u005cP{InBasic_Latin}", "");
       javastri=javastri.replaceAll("\u005c\u005cp{M}", "");


        writer.write(finalpath);
        writer.newLine();
         //writer.write(System.getProperty( "line.separator" ));
                writer.write(javastri);
         //writer = new BufferedWriter(new FileWriter("ParserOut/ParsedOutput-" + url.hashCode() +".txt"));


    }
    catch (ParseException ex)
    {
      ex.printStackTrace();
    }
    catch (IOException ee)
    {
    }
    finally
    {
      try
      {
        if (writer != null)
        writer.close();
      }
      catch (IOException e)
      {
      }
    }
  }

  final public int startParser() throws ParseException {
    trace_call("startParser");
    try {
      text();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STARTTEXT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(STARTTEXT);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case nested_STARTTEXT:
          case ENDTEXT:
          case OTHERTAGS:
          case TEXT:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case nested_STARTTEXT:
            jj_consume_token(nested_STARTTEXT);
            break;
          case TEXT:
            extractText();
            break;
          case ENDTEXT:
            jj_consume_token(ENDTEXT);
            break;
          case OTHERTAGS:
            jj_consume_token(OTHERTAGS);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        text();
      }
      jj_consume_token(0);
    System.out.println("Done Parsing!!!");
    {if (true) return - 1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("startParser");
    }
  }

  final public void text() throws ParseException {
    trace_call("text");
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(STRING);
      }
    } finally {
      trace_return("text");
    }
  }

  final public void extractText() throws ParseException {
    trace_call("extractText");
    try {
  Token t;
      t = jj_consume_token(TEXT);
    //PRINTING OUTPUT TO CONSOLE
   // System.out.println(t.image);


    //PRINTING TO A FILE

        fileOutput fp1 = new fileOutput();
        fp1.printIt(t.image);
    } finally {
      trace_return("extractText");
    }
  }

  /** Generated Token Manager. */
  public MyNewGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4,0x3c00,0x3c00,0x8,};
   }

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
